
services:
  # Application
  backend:
    image: backend-app:latest
    build:
      context: ../source/App.Backend
    ports:
    - "5000:5000"
    environment:
    - dbconnection=mongodb://mongodb:27017
    depends_on:
    - mongo-populator

  frontend:
    image: frontend-app:latest
    build:
      context: ../source/App.Frontend
    ports:
      - "3000:80"
    depends_on:
    - backend

  # Sample database service
  mongodb:
    build:
      context: ../source/MongoDB
    restart: unless-stopped
    env_file: .env
    ports:
    - "27017:27017"
    volumes:
    - ../source/MongoDB/mongo-data:/data/db

  mongo-populator:
    build:
      context: ../source/MongoDB/data
    restart: no
    env_file: .env
    command: ["sh", "./populateDb.sh", "${MONGO_INITDB_ROOT_USERNAME}", "${MONGO_INITDB_ROOT_PASSWORD}", "${MONGO_HOST}", "${MONGO_PORT}", "${DUMP_DIR}"]
    depends_on:
    - mongodb

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    expose:
      - 9090
    networks:
      - monitoring

volumes: 
  prometheus_data: {}
  mongo-data:

networks:
  monitoring:
    driver: bridge
